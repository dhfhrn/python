from collections import deque
import sys
input = sys.stdin.readline
#deque: double ended queue

"""BFS"""
# v: 정점의 수, e: 간선의 수
v, e, s = map(int, input().split())
# 인접 행렬 초기화, 0번 행과 0번 열은 사용 X
matrix = [[0] * (v + 1) for _ in range(v+1)]
# 간선 정보 최신화
for _ in range(e):
    a, b = map(int, input().split())
    matrix[a][b] = 1
    matrix[b][a] = 1
# 방문 표시 초기화, 0번째는 사용 X
visit = [False] * len(matrix)

def DFS(curr):
    visit[curr] = True
    print(curr, end=' ')
    for _next in range(1, len(matrix)):
        if not visit[_next] and matrix[curr][_next]:
            DFS(_next)

def BFS(start):
    que = deque()
    que.append(start)

    while que:
        curr = que.popleft()
        visit[curr] = True
        print(curr, end= ' ')
        for _next in range(1, len(matrix)):
            if not visit[_next] and matrix[curr][_next]:
                que.append(_next)
                visit[_next] = True

DFS(s)
visit = [False] * len(matrix)
print()
BFS(s)

def solution(maps):
    que = deque()
    # r: 행의 길이, c: 열의 길이
    r, c = len(maps), len(maps[0])
    # 목적지
    target = [r - 1, c - 1]
    visit = [[False] * c for _ in range(r)]
    que.append((0, 0, 1))
    visit[0][0] = True

    while que:
        x, y, cnt = que.popleft()
        if [x, y] == target:
            return cnt
        for nx, ny in [[x+1, y], [x-1, y], [x, y+1], [x, y-1]]:
            if 0 <= nx < r and 0 <= ny < c:
                if not visit[nx][ny] and maps[nx][ny]:
                    que.append([nx, ny, cnt + 1])
                    visit[nx][ny] = True

    return -1

    # que에 시작 좌표를 넣고 현재 좌표에서 움직일 수 있는 곳으로 이동한다
    # 이동할 떄마다 현재의 이동 거리를 같이 계산하며 que에 넣어준다
    # 만약에 이동한 좌표가 목적지라면 이동횟수를 return한다
    # 만약 que에 더 이상 값이 없다면, 내가 이동할 수 있는 모든 길을 확인했다는 것을 의미
    # 그럼에도 목적지에 도착하지 못한 것이라면 -1을 return

maps = [[1,0,1,1,1],
        [1,0,1,0,1],
        [1,0,1,1,1],
        [1,1,1,0,1],
        [0,0,0,0,1]]
print(solution(maps))

나이트의 이동
cpu는 어떻게 작동할까?
