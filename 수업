# def solution(mats, park):
#     max_y, max_x = len(park), len(park[0])
#     sorted_mats = sorted(mats, reverse=True)
#     for mat in sorted_mats:
#         for i in range(max_y):
#             for j in range(max_x):
#                 if park[i][j] == '-1':
#                     if graph_search(mat, i, j, max_y, max_x, park):
#                         return mat
#     return -1
#
# def graph_search(mat_size, cy, cx, max_y, max_x, park):
#     for i in range(mat_size):
#         for j in range(mat_size):
#             if not 0 <= cy + i < max_y or not 0 <= cx + j < max_x:
#                 return False
#             if park[cy + i][cx + j] != '-1':
#                 return False
#     return True
#
# def solution(mats, park):
#     binary_park = [[1 if x == "-1" else 0 for x in p] for p in park] # 돗자리를 놓지 못하는 곳을 0으로 통일
#
#     if not binary_park[0]:
#         return -1
#
#     rows = len(park)
#     cols = len(park[0])
#     max_side = 0
#
#     # DP 테이블 초기화
#     dp = [0] * (cols+1)
#     prev = 0
#
#     # 각 지점을 모든 정사각형의 오른쪽 아래로 보고 진행
#     for r in range(rows):
#         for c in range(1, cols+1):
#             temp = dp[c]
#             if binary_park[r][c-1] == 1:
#                 # dp[c] : 이전 행의 같은 열까지 고려한 정사각형의 최대크기
#                 # dp[c-1] : 현재 행의 이전 열까지 고려한 정사각형의 최대 크기
#                 # prev : 이전 행의 이전 열까지 고려한 정사각형의 최대 크기 (대각선 위 셀)
#                 dp[c] = min(dp[c], dp[c-1], prev) + 1
#                 max_side = max(max_side, dp[c])
#             else :
#                 dp[c] = 0
#             prev = temp
#
#     target = [x for x in mats if x <= max_side]
#     return max(target) if target else -1

def solution(points, routes):
    coord_record = {}      
    for route in routes:
        start = route[0]
        x,y = points[start-1]
        sec = 0
        if (x, y, sec) not in coord_record:
            coord_record[(x, y, sec)] = 1
        else:
            coord_record[(x, y, sec)] += 1
        for _next in route[1:]:
            nx,ny = points[_next-1]
            ox = 1 if x < nx else -1
            oy = 1 if y < ny else -1
            while x != nx:
                x += ox
                sec += 1
                if (x,y,sec) not in coord_record:
                    coord_record[(x,y,sec)] = 1
                else:
                    coord_record[(x,y,sec)] += 1
            while y != ny:
                y += oy
                sec += 1
                if (x,y,sec) not in coord_record:
                    coord_record[(x,y,sec)] = 1
                else:
                    coord_record[(x,y,sec)] += 1
                answer = 0
            for val in coord_record.values():
                if val > 1:
                    answer += 1
            return answer
